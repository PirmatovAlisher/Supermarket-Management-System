
@inject IGetProductByIdUseCase GetProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

@if (productToSell != null)
{
	@if (!string.IsNullOrWhiteSpace(errorMessage))
	{
		<div class="alert alert-danger">@errorMessage</div>
	}
	<br/>
	<EditForm Model="productToSell" OnValidSubmit="SellProduct">
		<DataAnnotationsValidator/>
		<ValidationSummary/>
		<div class="form-group mb-3">
			<label for="name">Product Name</label>
			<InputText class="form-control" id="name" readonly @bind-Value="@productToSell.Name" />
		</div>
		<div class="form-group mb-3">
			<label for="price">Price</label>
			<input class="form-control" id="price" readonly value="@(string.Format("{0:c}", productToSell.Price))" />
		</div>
		<div class="form-group mb-3">
			<label for="qty">Product Quantity</label>
			<InputNumber class="form-control" id="quantity" @bind-Value="@productToSell.Quantity" />
		</div>
		<button class="btn btn-outline-primary">Sell</button>
	</EditForm>
}


@code {

	[Parameter]
	public Product SelectedProduct { get; set; }

	private Product productToSell;

	[Parameter]
	public string CashierName { get; set; }

	[Parameter]
	public EventCallback<Product> OnProductSold { get; set; }

	public string errorMessage;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if(SelectedProduct != null)
		{
			productToSell = new Product()
				{
					Name = SelectedProduct.Name,
					CategoryId = SelectedProduct.CategoryId,
					ProductId = SelectedProduct.ProductId,
					Price = SelectedProduct.Price,
					Quantity = 0 // SelectedProduct.Quantity
				};
		}
		else
		{
			productToSell = null;
		}
	}


	private void SellProduct()
	{
		if (string.IsNullOrWhiteSpace(CashierName))
		{
			errorMessage ="Cashier's name is missing. Cannot sell product";
			return;
		}

		var product = GetProductByIdUseCase.GetProductById(productToSell.ProductId);
		if (productToSell.Quantity <= 0)
		{
			errorMessage = "The quantity has to be greater then zero.";
		}
		else if(product.Quantity >= productToSell.Quantity)
		{
			OnProductSold.InvokeAsync(productToSell);
			errorMessage = string.Empty;
			SellProductUseCase.Execute(CashierName, productToSell.ProductId, productToSell.Quantity.Value);
		}
		else
		{
			errorMessage = $"{product.Name} only has {product.Quantity} left. It is not enough";
		}
	}
}
